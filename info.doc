1.8-Puzzle

from collections import deque


class PuzzleState:
   def __init__(self, board, empty_pos, move="", parent=None):
       self.board = board
       self.empty_pos = empty_pos
       self.move = move
       self.parent = parent


   def is_goal(self):
       """Check if the current state is the goal state."""
       return self.board == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]


   def generate_neighbors(self):
       """Generate neighboring states."""
       neighbors = []
       x, y = self.empty_pos
       directions = {
           "UP": (x - 1, y),
           "DOWN": (x + 1, y),
           "LEFT": (x, y - 1),
           "RIGHT": (x, y + 1),
       }
       for move, (new_x, new_y) in directions.items():
           if 0 <= new_x < 3 and 0 <= new_y < 3:
               new_board = [row[:] for row in self.board]
               # Swap blank space with the adjacent tile
               new_board[x][y], new_board[new_x][new_y] = new_board[new_x][new_y], new_board[x][y]
               neighbors.append(PuzzleState(new_board, (new_x, new_y), move, self))
       return neighbors


   def reconstruct_path(self):
       """Reconstruct the path to the goal."""
       path = []
       state = self
       while state.parent:
           path.append(state.move)
           state = state.parent
       return path[::-1]


def solve_8_puzzle_bfs(initial_board):
   """Solve the 8-puzzle problem using BFS."""
   empty_pos = next((i, j) for i, row in enumerate(initial_board) for j, val in enumerate(row) if val == 0)
   start_state = PuzzleState(initial_board, empty_pos)
   queue = deque([start_state])
   visited = set()


   while queue:
       current_state = queue.popleft()
       serialized_board = tuple(tuple(row) for row in current_state.board)


       if serialized_board in visited:
           continue


       visited.add(serialized_board)


       if current_state.is_goal():
           return current_state.reconstruct_path()


       for neighbor in current_state.generate_neighbors():
           serialized_neighbor = tuple(tuple(row) for row in neighbor.board)
           if serialized_neighbor not in visited:
               queue.append(neighbor)


   return None


# Example Usage
initial_board = [
   [1, 2, 3],
   [4, 0, 6],
   [7, 5, 8],
]


solution = solve_8_puzzle_bfs(initial_board)
if solution:
   print("Solution found:")
   print(" -> ".join(solution))
else:
   print("No solution exists.")





2.3 missionaries 3 cannibals

# Variables initialization
im, ic, fm, fc, flag, select = 3, 3, 0, 0, 0, 0


def display(bpass1, bpass2):
   """
   Display the current state of the problem.
   """
   global im, ic, fm, fc, flag
   print("\n\n\n")
   print(" M " * fm + " C " * fc, end="")
   if flag == 0:
       print(f"     __________WATER___________BO({bpass1},{bpass2})AT  ", end="")
   else:
       print(f"     BO({bpass1},{bpass2})AT__________WATER___________  ", end="")
   print(" M " * im + " C " * ic)


def win():
   """
   Check if the game is completed successfully.
   """
   global fm, fc
   return not (fm == 3 and fc == 3)


def solution():
   """
   Core logic to solve the problem.
   """
   global im, ic, fm, fc, flag, select


   while win():
       if flag == 0:  # Boat is on the starting side
           if select == 1:
               display('C', ' ')
               ic += 1
           elif select == 2:
               display('C', 'M')
               ic += 1
               im += 1


           if ((im - 2) >= ic and (fm + 2) >= fc) or (im - 2) == 0:
               im -= 2
               select = 1
               display('M', 'M')
               flag = 1
           elif (ic - 2) <= im and (fm == 0 or (fc + 2) <= fm) or im == 0:
               ic -= 2
               select = 2
               display('C', 'C')
               flag = 1
           elif (ic - 1) <= (im - 1) and (fm + 1) >= (fc + 1):
               ic -= 1
               im -= 1
               select = 3
               display('M', 'C')
               flag = 1
       else:  # Boat is on the other side
           if select == 1:
               display('M', 'M')
               fm += 2
           elif select == 2:
               display('C', 'C')
               fc += 2
           elif select == 3:
               display('M', 'C')
               fc += 1
               fm += 1


           if win():
               if (fc > 1 and fm == 0) or im == 0:
                   fc -= 1
                   select = 1
                   display('C', ' ')
                   flag = 0
               elif (ic + 2) > im:
                   fc -= 1
                   fm -= 1
                   select = 2
                   display('C', 'M')
                   flag = 0


def main():
   """
   Main function to run the program.
   """
   print("MISSIONARIES AND CANNIBALS")
   display(' ', ' ')
   solution()
   display(' ', ' ')
   print("\n\n")


if __name__ == "__main__":
   main()





3.
!apt-get install swi-prolog
!pip install pyswip


from pyswip import Prolog


prolog = Prolog()


# Define gender facts (male and female)
prolog.assertz("male(john)")
prolog.assertz("male(tom)")
prolog.assertz("male(lucas)")
prolog.assertz("female(mary)")
prolog.assertz("female(sarah)")
prolog.assertz("female(kate)")
prolog.assertz("female(lily)")


# Define family relationships (parent facts)
prolog.assertz("parent(john, sarah)")    # John is Sarah's parent
prolog.assertz("parent(john, tom)")      # John is Tom's parent
prolog.assertz("parent(mary, sarah)")    # Mary is Sarah's parent
prolog.assertz("parent(mary, tom)")      # Mary is Tom's parent
prolog.assertz("parent(sarah, kate)")    # Sarah is Kate's parent
prolog.assertz("parent(sarah, lucas)")   # Sarah is Lucas's parent
prolog.assertz("parent(tom, lily)")      # Tom is Lily's parent


# Sibling rule: X and Y are siblings if they share the same parent
prolog.assertz("sibling(X, Y) :- parent(P, X), parent(P, Y), X \= Y")


# Grandparent rule: X is a grandparent of Y if X is a parent of Z and Z is a parent of Y
prolog.assertz("grandparent(X, Y) :- parent(X, Z), parent(Z, Y)")


# Mother rule: X is the mother of Y if X is a parent of Y and X is female
prolog.assertz("mother(X, Y) :- parent(X, Y), female(X)")


# Father rule: X is the father of Y if X is a parent of Y and X is male
prolog.assertz("father(X, Y) :- parent(X, Y), male(X)")


# Grandmother rule: X is the grandmother of Y if X is a female and a parent of Z, and Z is a parent of Y
prolog.assertz("grandmother(X, Y) :- mother(X, Z), parent(Z, Y)")


# Grandfather rule: X is the grandfather of Y if X is a male and a parent of Z, and Z is a parent of Y
prolog.assertz("grandfather(X, Y) :- father(X, Z), parent(Z, Y)")


print("Sarah's siblings:")
siblings = list(prolog.query("setof(Sibling, sibling(sarah, Sibling), SiblingList)"))
if siblings:
   for sibling in siblings[0]['SiblingList']:
       print(sibling)






print("\nKate's grandparents:")
grandparents = list(prolog.query("setof(Grandparent, grandparent(Grandparent, kate), GrandparentList)"))
if grandparents:
    for grandparent in grandparents[0]['GrandparentList']:
        print(grandparent)


print("\nTom's children:")
children = list(prolog.query("setof(Child, parent(tom, Child), ChildList)"))
if children:
    for child in children[0]['ChildList']:
        print(child)

print("\nKate's mother:")
for result in prolog.query("mother(Mother, kate)"):
    print(result['Mother'])



print("\nKate's father:")
for result in prolog.query("father(Father, kate)"):
    print(result['Father'])

print("\nKate's grandmother:")
grandmothers = list(prolog.query("setof(Grandmother, grandmother(Grandmother, kate), GrandmotherList)"))
if grandmothers:
    for grandmother in grandmothers[0]['GrandmotherList']:
        print(grandmother)

print("\nKate's grandfather:")
grandfathers = list(prolog.query("setof(Grandfather, grandfather(Grandfather, kate), GrandfatherList)"))
if grandfathers:
    for grandfather in grandfathers[0]['GrandfatherList']:
        print(grandfather)



4.A* Algo

# Python program for A* Search Algorithm
import math
import heapq


# Define the Cell class




class Cell:
   def __init__(self):
     # Parent cell's row index
       self.parent_i = 0
   # Parent cell's column index
       self.parent_j = 0
# Total cost of the cell (g + h)
       self.f = float('inf')
   # Cost from start to this cell
       self.g = float('inf')
   # Heuristic cost from this cell to destination
       self.h = 0




# Define the size of the grid
ROW = 9
COL = 10


# Check if a cell is valid (within the grid)




def is_valid(row, col):
   return (row >= 0) and (row < ROW) and (col >= 0) and (col < COL)


# Check if a cell is unblocked




def is_unblocked(grid, row, col):
   return grid[row][col] == 1


# Check if a cell is the destination




def is_destination(row, col, dest):
   return row == dest[0] and col == dest[1]


# Calculate the heuristic value of a cell (Euclidean distance to destination)




def calculate_h_value(row, col, dest):
   return ((row - dest[0]) ** 2 + (col - dest[1]) ** 2) ** 0.5


# Trace the path from source to destination




def trace_path(cell_details, dest):
   print("The Path is ")
   path = []
   row = dest[0]
   col = dest[1]


   # Trace the path from destination to source using parent cells
   while not (cell_details[row][col].parent_i == row and cell_details[row][col].parent_j == col):
       path.append((row, col))
       temp_row = cell_details[row][col].parent_i
       temp_col = cell_details[row][col].parent_j
       row = temp_row
       col = temp_col


   # Add the source cell to the path
   path.append((row, col))
   # Reverse the path to get the path from source to destination
   path.reverse()


   # Print the path
   for i in path:
       print("->", i, end=" ")
   print()


# Implement the A* search algorithm




def a_star_search(grid, src, dest):
   # Check if the source and destination are valid
   if not is_valid(src[0], src[1]) or not is_valid(dest[0], dest[1]):
       print("Source or destination is invalid")
       return


   # Check if the source and destination are unblocked
   if not is_unblocked(grid, src[0], src[1]) or not is_unblocked(grid, dest[0], dest[1]):
       print("Source or the destination is blocked")
       return


   # Check if we are already at the destination
   if is_destination(src[0], src[1], dest):
       print("We are already at the destination")
       return


   # Initialize the closed list (visited cells)
   closed_list = [[False for _ in range(COL)] for _ in range(ROW)]
   # Initialize the details of each cell
   cell_details = [[Cell() for _ in range(COL)] for _ in range(ROW)]


   # Initialize the start cell details
   i = src[0]
   j = src[1]
   cell_details[i][j].f = 0
   cell_details[i][j].g = 0
   cell_details[i][j].h = 0
   cell_details[i][j].parent_i = i
   cell_details[i][j].parent_j = j


   # Initialize the open list (cells to be visited) with the start cell
   open_list = []
   heapq.heappush(open_list, (0.0, i, j))


   # Initialize the flag for whether destination is found
   found_dest = False


   # Main loop of A* search algorithm
   while len(open_list) > 0:
       # Pop the cell with the smallest f value from the open list
       p = heapq.heappop(open_list)


       # Mark the cell as visited
       i = p[1]
       j = p[2]
       closed_list[i][j] = True


       # For each direction, check the successors
       directions = [(0, 1), (0, -1), (1, 0), (-1, 0),
                     (1, 1), (1, -1), (-1, 1), (-1, -1)]
       for dir in directions:
           new_i = i + dir[0]
           new_j = j + dir[1]


           # If the successor is valid, unblocked, and not visited
           if is_valid(new_i, new_j) and is_unblocked(grid, new_i, new_j) and not closed_list[new_i][new_j]:
               # If the successor is the destination
               if is_destination(new_i, new_j, dest):
                   # Set the parent of the destination cell
                   cell_details[new_i][new_j].parent_i = i
                   cell_details[new_i][new_j].parent_j = j
                   print("The destination cell is found")
                   # Trace and print the path from source to destination
                   trace_path(cell_details, dest)
                   found_dest = True
                   return
               else:
                   # Calculate the new f, g, and h values
                   g_new = cell_details[i][j].g + 1.0
                   h_new = calculate_h_value(new_i, new_j, dest)
                   f_new = g_new + h_new


                   # If the cell is not in the open list or the new f value is smaller
                   if cell_details[new_i][new_j].f == float('inf') or cell_details[new_i][new_j].f > f_new:
                       # Add the cell to the open list
                       heapq.heappush(open_list, (f_new, new_i, new_j))
                       # Update the cell details
                       cell_details[new_i][new_j].f = f_new
                       cell_details[new_i][new_j].g = g_new
                       cell_details[new_i][new_j].h = h_new
                       cell_details[new_i][new_j].parent_i = i
                       cell_details[new_i][new_j].parent_j = j


   # If the destination is not found after visiting all cells
   if not found_dest:
       print("Failed to find the destination cell")


# Driver Code




def main():
   # Define the grid (1 for unblocked, 0 for blocked)
   grid = [
       [1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
       [1, 1, 1, 0, 1, 1, 1, 0, 1, 1],
       [1, 1, 1, 0, 1, 1, 0, 1, 0, 1],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
       [1, 1, 1, 0, 1, 1, 1, 0, 1, 0],
       [1, 0, 1, 1, 1, 1, 0, 1, 0, 0],
       [1, 0, 0, 0, 0, 1, 0, 0, 0, 1],
       [1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
       [1, 1, 1, 0, 0, 0, 1, 0, 0, 1]
   ]


   # Define the source and destination
   src = [8, 0]
   dest = [0, 0]


   # Run the A* search algorithm
   a_star_search(grid, src, dest)




if __name__ == "__main__":
   main()


5.Min Max Algo

# Python equivalent of the SimpleMinmax class


board = [
   [' ', ' ', ' '],
   [' ', ' ', ' '],
   [' ', ' ', ' ']
]


def minmax(is_max):
   score = check_win()
   if score == 10 or score == -10:
       return score
   if not is_move_left():
       return 0


   best = -1000 if is_max else 1000


   for i in range(3):
       for j in range(3):
           if board[i][j] == ' ':
               board[i][j] = 'X' if is_max else 'O'
               best = max(best, minmax(not is_max)) if is_max else min(best, minmax(not is_max))
               board[i][j] = ' '
   return best


def is_move_left():
   return any(board[i][j] == ' ' for i in range(3) for j in range(3))


def check_win():
   # Check rows and columns
   for i in range(3):
       if board[i][0] == board[i][1] == board[i][2] and board[i][0] != ' ':
           return 10 if board[i][0] == 'X' else -10
       if board[0][i] == board[1][i] == board[2][i] and board[0][i] != ' ':
           return 10 if board[0][i] == 'X' else -10


   # Check diagonals
   if board[0][0] == board[1][1] == board[2][2] and board[0][0] != ' ':
       return 10 if board[0][0] == 'X' else -10
   if board[0][2] == board[1][1] == board[2][0] and board[0][2] != ' ':
       return 10 if board[0][2] == 'X' else -10


   return 0


if __name__ == "__main__":
   print("Best value:", minmax(True))




6. 8- Queen 

N = 8


def solveNQueens(board, col):
   if col == N:
       for row in board:
           print(row)  # Print each row on a new line
       print()  # Add a line break after each solution
       return True


   for i in range(N):
       if isSafe(board, i, col):
           board[i][col] = 1
           if solveNQueens(board, col + 1):
               return True
           board[i][col] = 0
   return False


def isSafe(board, row, col):
   for x in range(col):
       if board[row][x] == 1:
           return False
   for x, y in zip(range(row, -1, -1), range(col, -1, -1)):
       if board[x][y] == 1:
           return False
   for x, y in zip(range(row, N, 1), range(col, -1, -1)):
       if board[x][y] == 1:
           return False
   return True


board = [[0 for x in range(N)] for y in range(N)]
if not solveNQueens(board, 0):
   print("No solution found")




7.Froward chaining

facts = ["A", "B"]


#(condition, conclusion)
rules = [
   (["A", "B"], "C"),  # If A and B are true, then C is true
   (["C"], "D"),       # If C is true, then D is true
   (["D"], "E")        # If D is true, then E is true
]


def forward_chaining(facts, rules):
   inferred = set(facts)
   new_fact_added = True


   while new_fact_added:
       new_fact_added = False 
       for rule in rules: 
           conditions, conclusion = rule 
          
           # Check if all conditions are satisfied
           all_conditions_met = True
           for condition in conditions:
               if condition not in inferred:
                   all_conditions_met = False
                   break 
          
   
           if all_conditions_met and conclusion not in inferred:
               inferred.add(conclusion) 
               print(f"Inferred new fact: {conclusion}")
               new_fact_added = True 
              
   return inferred 




print("Initial facts:", facts)
inferred_facts = forward_chaining(facts, rules)
print("Final inferred facts:", inferred_facts)


8.Backward Chaining:





# Define rules and facts
class BackwardChaining:
   def __init__(self):
       # Rules in the format: {conclusion: [conditions]}
       self.rules = {
           "rain": ["cloudy"],
           "cloudy": ["humid"],
           "humid": ["high_temperature"]
       }
       # Facts that are known
       self.facts = {"high_temperature"}


   # Backward chaining function
   def backward_chain(self, goal):
       if goal in self.facts:
           print(f"Goal {goal} is a known fact.")
           return True


       if goal not in self.rules:
           print(f"Goal {goal} has no rules, and it is not a known fact.")
           return False


       # Check the conditions for the rule that leads to the goal
       for condition in self.rules[goal]:
           print(f"Checking if {condition} is true to achieve {goal}.")
           if not self.backward_chain(condition):
               print(f"Failed to prove {condition}, so {goal} is false.")
               return False


       print(f"All conditions for {goal} are satisfied.")
       return True




# Example usage
bc = BackwardChaining()
goal = "rain"
result = bc.backward_chain(goal)


if result:
   print(f"The goal {goal} is true.")
else:
   print(f"The goal {goal} is false.")






9.Chatbot

pip install wikipedia
pip install youtube-search-python
pip install requests

import wikipedia
from youtubesearchpython import VideosSearch
import requests
import json
from datetime import datetime
from googlesearch import search


def simple_chatbot():
   print("Bot: Hi! I can help you with: Wikipedia, YouTube, Weather, or general chat!")
 
   responses = {
       "hello": "Hi there!",
       "how are you": "I'm doing well, thanks!",
       "bye": "Goodbye!",
       "name": "My name is SimpleBot"
   }
 
   while True:
       user_input = input("You: ").lower()
     
       if user_input == "quit":
           break
         
       # Wikipedia search
       elif "wiki" in user_input or "wikipedia" in user_input:
           try:
               query = user_input.replace("wiki", "").replace("wikipedia", "").strip()
               result = wikipedia.summary(query, sentences=2)
               print("Bot:", result)
           except:
               print("Bot: Couldn't find that on Wikipedia.")
             
       # YouTube search
       elif "youtube" in user_input or "video" in user_input:
           try:
               query = user_input.replace("youtube", "").replace("video", "").strip()
               results = YoutubeSearch(query, max_results=1).to_dict()
               if results:
                   video_url = f"https://youtube.com{results[0]['url_suffix']}"
                   print("Bot: Here's a video:", video_url)
           except:
               print("Bot: Couldn't find that video.")




       elif "google" in user_input:
           try:
               query = user_input.replace("google", "").strip()
               for url in search(query, num_results=3):
                   print("Bot:", url)
           except:
               print("Bot: Couldn't perform search.")
                     
       # Normal chat responses
       else:
           for key in responses:
               if key in user_input:
                   print("Bot:", responses[key])
                   break
           else:
               print("Bot: I don't understand that. Try asking about Wikipedia, YouTube, or Weather!")
if __name__ == "__main__":
   print("Bot: Starting up...")
   simple_chatbot()
